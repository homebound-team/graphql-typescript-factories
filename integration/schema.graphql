# An entity that will be a mapped typed
type Author {
  name: String!
  summary: AuthorSummary!
  popularity: PopularityDetail!
  working: Working
  birthday: Date
  books: [Book!]!
}

# A DTO that is just some fields
type AuthorSummary {
  author: Author!
  numberOfBooks: Int!
  amountOfSales: Float
}

type Book {
  name: String!
}

union SearchResult = Author | Book

schema {
  query: Query
  mutation: Mutation
}

type Query {
  authors(id: ID): [Author!]!
  authorSummaries: [AuthorSummary!]!
  search(query: String!): [SearchResult!]!
}

type Mutation {
  saveAuthor(input: AuthorInput!): SaveAuthorResult!
}

type SaveAuthorResult {
  author: Author!
}

input AuthorInput {
  name: String
}

enum Popularity {
  Low
  High
}

type PopularityDetail {
  code: Popularity!
  name: String!
}

enum Working {
  YES
  NO
}

scalar Date
