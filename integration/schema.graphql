# An entity that will be a mapped typed
type Author implements Named {
  id: ID!
  # Ensure that the newAuthor factory does not call nextFactoryId for this field
  anotherId: ID!
  name: String!
  summary: AuthorSummary!
  popularity: PopularityDetail!
   # Example of a detail that a) has an extra field and b) is only referenced from a list
  workingDetail: [WorkingDetail!]!
  working: Working
  birthday: Date
  books: [Book!]!
  bookPopularities: [PopularityDetail!]!
}

# A DTO that is just some fields
type AuthorSummary {
  id: ID!
  author: Author!
  numberOfBooks: Int!
  amountOfSales: Float
}

type Book implements Named {
  name: String!
  # Example of a nullable enum
  popularity: PopularityDetail
  # Example of a nullable reference
  coauthor: Author
  # Purposefully use [...]-no-bang as a boundary case
  reviews: [BookReview]
  # Example of an enum with underscores in the values
  status: BookStatus!
}

type BookReview {
  rating: Int!
}

type SearchResults {
  # For testing when a type name is not concrete
  result1: SearchResult
  result2: Named
  result3: Author
}


union SearchResult = Author | Book

schema {
  query: Query
  mutation: Mutation
}

type Query {
  authors(id: ID): [Author!]!
  authorSummaries: [AuthorSummary!]!
  search(query: String!): [SearchResult!]!
}

type Mutation {
  saveAuthor(input: AuthorInput!): SaveAuthorResult!
}

type SaveAuthorResult {
  author: Author!
}

input AuthorInput {
  name: String
}

type CalendarInterval {
  start: Date!
  end: Date!
}

enum Popularity {
  Low
  High
}

type PopularityDetail implements Named {
  code: Popularity!
  name: String!
}

# An example of an enum type with an extra field
type WorkingDetail {
  code: Working!
  name: String!
  extraField: Int!
}

enum Working {
  YES
  NO
}

enum BookStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
}

scalar Date

interface Named {
  name: String!
}

type Parent implements Named {
  name: String!
  children: [Named!]!
}

type Child implements Named {
  name: String!
  # For testing newChild() picks newAuthor
  parent: Named!
}
